<?php

/**
 * @file
 * Code for the ERPAL commerce user interface functional module.
 */

/**
 * Include file with funcitons for invoice.
 */
module_load_include('inc', 'erpal_commerce_ui', 'includes/erpal_commerce_ui.line_item');

/**
 * Implements hook_menu().
 */
function erpal_commerce_ui_menu() {
  $items['order-pdf/%commerce_order'] = array(
    'title' => 'Order',
    'page callback' => 'erpal_commerce_ui_pdf',
    'page arguments' => array(1),
    'access callback' => 'erpal_commerce_ui_order_view_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['admin/commerce/config/billy-order/pdf'] = array(
    'title' => 'Order PDF',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('erpal_commerce_ui_pdf_admin_form'),
    'access arguments' => array('configure order settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'erpal_commerce_ui.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_page_build().
 */
function erpal_commerce_ui_page_build(&$page) {
  global $user;
  $page['content']['#attached']['js'][] = drupal_get_path('module', 'erpal_commerce_ui') . '/js/erpal_commerce_ui.js';
}

/**
 * Implements hook_commerce_billy_order_types_alter().
 *
 * Alter the order types to which need add invoice fields.
 */
function erpal_commerce_ui_commerce_billy_order_types_alter(&$order_types) {
  $order_types = array_diff($order_types, array('commerce_order'));
}

/**
 * Implements hook_views_api().
 */
function erpal_commerce_ui_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'erpal_commerce_ui') . '/includes/views',
  );
}

/**
 * Implements hook_ctools_plugin_api().
 *
 * We provide our default pages for page_manager.
 */
function erpal_commerce_ui_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => "1");
  }
  if ($module == "cat" && $api == "cat") {
    return array("version" => "1");
  }
  if ($module == "path_breadcrumbs" && $api == "path_breadcrumbs") {
    return array("version" => "1");
  }
  if ($module == 'panels_mini' && $api == 'panels_default') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_admin_paths().
 */
function erpal_commerce_ui_admin_paths() {
  $paths = array(
    'admin/commerce/orders/*/view' => FALSE,
    'admin/commerce/orders/*' => FALSE,
    'admin/commerce/orders/*/edit' => FALSE,
    'admin/commerce/products/add/*' => FALSE,
    'admin/commerce/products/*/edit' => FALSE,
    'admin/commerce/products/*/delete' => FALSE,
  );
  return $paths;
}

/**
 * Implements hook_menu_alter().
 */
function erpal_commerce_ui_menu_alter(&$items) {
  // Rename menu item for quote.
  if (!empty($items['admin/commerce/orders/add/quote'])) {
    $items['admin/commerce/orders/add/quote']['title'] = t('Add a @type');
  }

  // Rename menu item for invoice.
  if (!empty($items['admin/commerce/orders/add/invoice'])) {
    $items['admin/commerce/orders/add/invoice']['title'] = t('Add an @type');
  }

  // Rules link for quote replication to order.
  if (!empty($items['add/order/%/%'])) {
    if (!empty($items['add/order/%/%']['access arguments'][0]) && is_object($items['add/order/%/%']['access arguments'][0])) {
      unset($items['add/order/%/%']['access callback']);
      $items['add/order/%/%']['access arguments'] = array('access rules link ' . $items['add/order/%/%']['access arguments'][0]->name);
      $items['add/order/%/%']['type'] = MENU_LOCAL_ACTION;
    }
  }

  // Rules link for order replication to invoice.
  if (!empty($items['add/invoice/%/%'])) {
    if (!empty($items['add/invoice/%/%']['access arguments'][0]) && is_object($items['add/invoice/%/%']['access arguments'][0])) {
      unset($items['add/invoice/%/%']['access callback']);
      $items['add/invoice/%/%']['access arguments'] = array('access rules link ' . $items['add/invoice/%/%']['access arguments'][0]->name);
      $items['add/invoice/%/%']['type'] = MENU_LOCAL_ACTION;
    }
  }

  // Just create simple page and for user which not admin.
  if (!empty($items['admin/commerce/orders/add/quote'])) {
    $items['quote/add'] = $items['admin/commerce/orders/add/quote'];
  }

  if (!empty($items['admin/commerce/orders/add'])) {
    unset($items['admin/commerce/orders/%commerce_order']);
    $items['order/add'] = $items['admin/commerce/orders/add'];
  }

  if (!empty($items['admin/commerce/products/add'])) {
    $items['product/add'] = $items['admin/commerce/products/add'];
    $items['product/add']['page callback'] = 'erpal_commerce_ui_add_page';
    $items['product/add']['file path'] = drupal_get_path('module', 'commerce_product_ui');
  }
  foreach (commerce_product_types() as $type => $product_type) {
    if (!empty($items['admin/commerce/products/add/' . strtr($type, array('_' => '-'))])) {
      $items['product/add/' . strtr($type, array('_' => '-'))] = $items['admin/commerce/products/add/' . strtr($type, array('_' => '-'))];
      $items['product/add/' . strtr($type, array('_' => '-'))]['file path'] = drupal_get_path('module', 'commerce_product_ui');
    }
  }

  // Change Access callback for PDF generation.
  if (!empty($items['invoice-pdf/%commerce_order'])) {
    $items['invoice-pdf/%commerce_order']['access callback'] = 'erpal_commerce_ui_invoice_view_access';
  }

  $items['order/%/invoice']['type'] = MENU_CALLBACK;
}

/**
 * Menu callback: display a list of product types that the user can create.
 */
function  erpal_commerce_ui_add_page() {
  $item = menu_get_item();
  $content = system_admin_menu_block($item);
  // Bypass the admin/commerce/products/add listing if only one product type is
  // available.
  if (count($content) == 1) {
    $item = array_shift($content);

    // Set destination for next redirect.
    $destination = drupal_get_destination();
    unset($_GET['destination']);

    drupal_goto($item['href'], array('query' => $destination));
  }

  return theme('product_add_list', array('content' => $content));
}


/**
 * Implements hook_commerce_product_type_insert().
 */
function erpal_commerce_ui_commerce_product_type_insert($product_type) {
  variable_set('pathauto_commerce_product_' . $product_type['type'] . '_pattern', 'product/[commerce-product:product-id]');
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * The Product UI module instantiates the Product add/edit form at particular
 * paths in the Commerce IA. It uses its own form ID to do so and alters the
 * form here to add in appropriate redirection and an additional button.
 *
 * @see commerce_product_ui_product_form()
 */
function erpal_commerce_ui_form_commerce_product_ui_product_form_alter(&$form, &$form_state) {
  $product = $form_state['commerce_product'];

  // Add a submit handler to the save button to add a redirect.
  $form['actions']['submit']['#submit'][] = 'erpal_commerce_ui_product_form_submit';

  // Add the save and continue button for new products.
  if (empty($product->product_id)) {
    $form['actions']['save_continue'] = array(
      '#type' => 'submit',
      '#value' => t('Save and add another'),
      '#submit' => $form['actions']['submit']['#submit'],
      '#suffix' => l(t('Cancel'), 'products'),
      '#weight' => 45,
    );
  }
  else {
    $form['actions']['submit']['#suffix'] = l(t('Cancel'), 'products');
  }
}

/**
 * Submit callback for commerce_product_ui_product_form().
 *
 * @see commerce_product_ui_form_commerce_product_ui_product_form_alter()
 */
function erpal_commerce_ui_product_form_submit($form, &$form_state) {
  // Set the redirect based on the button clicked.
  $array_parents = $form_state['triggering_element']['#array_parents'];
  $submit_element = array_pop($array_parents);

  if ($submit_element == 'save_continue') {
    $des = drupal_get_destination();
    if (!empty($des['destination'])) {
      unset($_GET['destination']);
    }
    $form_state['redirect'] = array(
      'product/add/' . strtr($form_state['commerce_product']->type, array('_' => '-')),
      array('query' => $des),
    );
  }
  elseif (arg(0) == 'product' && arg(1) == 'add') {
    $form_state['redirect'] = 'products';
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function erpal_commerce_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {

  // Add local tasks for adding quote/orders on pages for quotes/orders menage.
  $local_tasks = array();

  $order_pages = array('admin/commerce/orders/%');
  if (in_array($root_path, $order_pages)) {

    $arg = 3;
    $order = commerce_order_load(arg($arg));

    if ($order->type == 'commerce_order') {
      // Add download pdf on 'commerce_order' bundle.
      $local_tasks[] = array(
        'root_path' => $root_path,
        'menu_item' => 'order-pdf/' . arg($arg),
        'title'     => 'Download PDF',
        'query'     => array(),
      );

      $link = rules_link_render('create_invoice', arg($arg));
      if (!empty($link['#href'])) {
        $local_tasks[] = array(
          'root_path' => $root_path,
          'menu_item' => $link['#href'],
          'title'     => 'Create an Invoice',
        );
      }
    }

    // Add Create order link on quote page.
    if ($order->type == 'quote') {
      $link = rules_link_render('create_order', arg($arg));
      if (!empty($link['#href'])) {
        $local_tasks[] = array(
          'root_path' => $root_path,
          'menu_item' => $link['#href'],
          'title'     => 'Create an Order',
        );
      }
    }

  }

  erpal_core_add_local_actions($data, $local_tasks, $root_path);
}

/**
 * Implements hook_entity_info_alter().
 */
function erpal_commerce_ui_entity_info_alter(&$info) {
  $info['commerce_order']['view modes']['order_pdf'] = array(
    'label' => t('PDF'),
    'custom settings' => FALSE,
  );
}

/**
 * Implements hook_theme().
 */
function erpal_commerce_ui_theme() {
  // Register the template specific for the commerce pdf order.
  $items['commerce_order__order__order_pdf'] = array(
    'render element' => 'elements',
    'template' => 'commerce_order--order--order_pdf',
    'path' => drupal_get_path('module', 'erpal_commerce_ui') . '/templates',
  );
  return $items;
}

/**
 * Implements hook_preprocess_entity().
 */
function erpal_commerce_ui_preprocess_entity(&$variables) {
  $entity_type = $variables['entity_type'];
  $view_mode = $variables['view_mode'];

  // Replace default template.
  if ($entity_type == 'commerce_order' && $view_mode == 'order_pdf') {
    $order = $variables['commerce_order'];
    if (in_array($order->type, array('commerce_order'))) {
      foreach ($variables['theme_hook_suggestions'] as &$theme_name) {
        if ($theme_name == $entity_type . '__' . $order->type . '__' . $view_mode) {
          $theme_name = $entity_type . '__order__' . $view_mode;
        }
      }
    }
  }
}

/**
 * Menu item access callback: prevent view access to the admin order display.
 *
 * For customers who have 'view' access to the order but not administration
 * pages.
 *
 * @param object $order
 *   The order object as loaded via the menu item wildcard.
 *
 * @return bool
 *   Boolean indicating the user's access to view the page.
 */
function erpal_commerce_ui_order_view_access($order) {
  if ($order->type == 'commerce_order') {
    return commerce_order_access('view', $order);
  }
  return FALSE;
}

/**
 * Menu item access callback: prevent view access to the admin order display.
 *
 * For customers who have 'view' access to the order but not administration
 * pages.
 *
 * @param object $order
 *   The order object as loaded via the menu item wildcard.
 *
 * @return bool
 *   Boolean indicating the user's access to view the page.
 */
function erpal_commerce_ui_invoice_view_access($order) {
  if ($order->type == 'invoice') {
    return commerce_order_access('view', $order);
  }
  return FALSE;
}

/**
 * Page callback for order PDF.
 */
function erpal_commerce_ui_pdf($order) {
  $order->pdf_download = TRUE;
  $html = erpal_commerce_ui_pdf_html($order);
  $filename = preg_replace('/[^a-z0-9]/', '_', drupal_strtolower('order_' . $order->order_number)) . '.pdf';

  try {
    commerce_billy_pdf_output($html, $filename);
    drupal_exit();
  }
  catch (DOMPDF_Exception $e) {
    drupal_set_message(t('Error generating PDF order. Please contact the website administrator.'), 'error');
    watchdog('erpal_commerce_ui', 'DOMPDF exception while generating pdf order: %message', array('%message' => $e->getMessage()), WATCHDOG_ERROR);
    return '';
  }
}

/**
 * Helper function that returns the generated HTML for the order PDFs.
 *
 * @param object[] $orders
 *   Array of order objects.
 */
function erpal_commerce_ui_pdf_html($orders) {
  // Backwards compatibilty: also accept a single order object.
  if (is_object($orders)) {
    $orders = array($orders);
  }
  foreach ($orders as $order) {
    $vars['viewed_orders'][] = entity_view('commerce_order', array($order->order_id => $order), 'order_pdf', NULL, TRUE);
  }
  $css_files = variable_get('erpal_order_pdf_css_files', array(drupal_get_path('module', 'erpal_commerce_ui') . '/css/pdf.css'));
  $vars['inline_css'] = "";
  foreach ($css_files as $file) {
    $vars['inline_css'] .= file_get_contents($file);
  }

  return theme('commerce_billy_pdf_page', $vars);
}

/**
 * Implements hook_commerce_order_view().
 */
function erpal_commerce_ui_commerce_order_view($order, $view_mode) {
  // Add content variables for the PDF generation.
  $settings = variable_get('erpal_order_pdf_text_settings', array());
  foreach ($settings as &$value) {
    $value = token_replace($value, array('commerce-order' => $order));
  }
  $custom_date_format = !empty($settings['order_date_format']) ? $settings['order_date_format'] : 'm/d/Y';
  // Just load commerce_customer_profile for current Vendor.
  $vendor = field_get_items('commerce_order', $order, 'field_vendor_address');
  if ($vendor) {
    $commerce_profile = commerce_customer_profile_load($vendor[0]['profile_id']);
    $commerce_profile_view = entity_view('commerce_customer_profile', array($commerce_profile));
    $commerce_customer_address = field_get_items('commerce_customer_profile', $commerce_profile, 'commerce_customer_address');
    $countries = country_get_list();
  }
  $date = '';
  $field_order_date = field_get_items('commerce_order', $order, 'field_order_date');
  if ($field_order_date) {
    $date = $field_order_date[0]['target_id'];
  }

  if ($date) {
    $date = entity_metadata_wrapper('date_item', $date);
    $date = $date->field_date_item_single->value();
  }
  else {
    $date = $order->created;
  }
  $date = format_date($date, 'custom', $custom_date_format);
  // Set quote for order page.
  $quote = field_get_items('commerce_order', $order, 'field_quote');
  if (!empty($quote[0]['entity'])) {
    $order->content['order_quote_number'] = array(
      '#markup' => t('Quote No.: @id', array('@id' => $quote[0]['entity']->order_number)),
    );
  }
  // Set order for invoice page.
  $invoice_order = field_get_items('commerce_order', $order, 'field_invoice_order');
  if (!empty($invoice_order[0]['entity'])) {
    $order->content['order_number']['#markup'] .= '<br/>' . t('Order No.: @id', array('@id' => $invoice_order[0]['entity']->order_number));
  }
  // Add Vendor address to order header if exists.
  if (in_array($view_mode, array('quote_pdf', 'order_pdf', 'pdf'))) {

    // If this order is invoice need to change invoice_header field.
    if (!empty($order->content['invoice_header'])) {
      $order->content['order_header'] =& $order->content['invoice_header'];
    }

    if ($vendor) {
      $order->content['order_header'] = array(
        '#markup' => drupal_render($commerce_profile_view),
      );
      $address = array(
        $commerce_customer_address[0]['name_line'],
        $commerce_customer_address[0]['postal_code'] . ' ' . $commerce_customer_address[0]['locality'],
        $countries[$commerce_customer_address[0]['country']],
      );
      // Set quote/order footer.
      $order->content['order_footer'] = array(
        '#markup' => implode(', ', $address),
      );
      $order->content['invoice_footer'] = array(
        '#markup' => implode(', ', $address),
      );

      $header_date_text = t('@location, @date', array('@location' => $commerce_customer_address[0]['locality'], '@date' => $date));
      $order->content['invoice_header_date'] = array(
        '#markup' => $header_date_text,
      );
    }

    // If Vendor is empty just take default settings.
    else {
      $order->content['order_header'] = array(
        '#markup' => isset($settings['order_header']) ? $settings['order_header'] : '',
      );
      // Set quote/order footer.
      $order->content['order_footer'] = array(
        '#markup' => isset($settings['order_footer']) ? $settings['order_footer'] : '',
      );
    }

  }
  if ($view_mode == 'order_pdf') {

    // Set correct title for quote, order and invoice.
    drupal_set_title(erpal_commerce_order_label($order));

    // Set quote/order text.
    $text = field_get_items('commerce_order', $order, 'field_order_text');
    if ($text) {
      $order->content['order_text'] = array(
        '#markup' => $text[0]['value'],
      );
    }
    else {
      $order->content['order_text'] = array(
        '#markup' => isset($settings['order_text']) ? $settings['order_text'] : '',
      );
    }

    if ($vendor) {
      $header_date_text = t('@location, @date', array('@location' => $commerce_customer_address[0]['locality'], '@date' => $date));
    }
    elseif (!empty($settings['order_location'])) {
      $header_date_text = t('@location, @date', array('@location' => $settings['order_location'], '@date' => $date));
    }
    else {
      $header_date_text = $date;
    }
    $order->content['order_header_date'] = array(
      '#markup' => $header_date_text,
    );
    $type = commerce_order_type_load($order->type);
    if (!$type) {
      $type = new stdClass();
      $type->name = 'Order';
    }
    $order->content['order_number'] = array(
      '#markup' => t('@name No.: @id', array('@name' => $type->name, '@id' => $order->order_number)),
    );
    $order->content['order_logo'] = array(
      '#value' => variable_get('erpal_order_pdf_logo', 'misc/druplicon.png'),
    );
    if (empty($order->pdf_download)) {
      $css_files = variable_get('erpal_order_pdf_css_files', array(drupal_get_path('module', 'erpal_commerce_ui') . '/css/pdf.css'));
      foreach ($css_files as $file) {
        $order->content['#attached']['css'][] = $file;
      }
      $order->content['order_logo']['#value'] = '/' . $order->content['order_logo']['#value'];
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function erpal_commerce_ui_form_commerce_order_order_form_alter(&$form, &$form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = 'erpal_commerce_ui_order_form_submit';
}

/**
 * Submit callback: redirect to the appropriate page for the specified order.
 */
function erpal_commerce_ui_order_form_submit($form, &$form_state) {

  // Extract the order from the form state.
  $order = $form_state['commerce_order'];

  // Redirect to the pdf view mode.
  if (in_array($order->type, array('commerce_order', 'quote', 'invoice'))) {
    $form_state['redirect'] = 'admin/commerce/orders/' . $order->order_id;
  }
}


/**
 * Implements hook_views_pre_render().
 */
function erpal_commerce_ui_views_pre_render(&$view) {
  if ($view->name == 'erpal_invoice_line_items' && $view->current_display == 'page_1') {
    $oid = arg(1);
    if (is_numeric(arg(3))) {
      $oid = arg(3);
    }
    $order = commerce_order_load($oid);
    if ($order) {
      $view->build_info['title'] = t('Create invoice for order') . ' ' . l($order->order_number, 'admin/commerce/orders/' . $order->order_id);
    }
  }
}

/**
 * Implements hook_preprocess_product_add_list().
 */
function erpal_commerce_ui_preprocess_product_add_list(&$variables) {
  $content = &$variables['content'];
  if ($content) {
    foreach ($content as &$item) {
      $item['localized_options']['query'] = drupal_get_destination();
    }
  }
}

/**
 * Implements hook_replicate_entity_ENTITY_TYPE().
 *
 * Alter the replica of type commerce_order.
 * Use this function to make specific changes to an entity of a given type.
 * Usefull to "clean" custom entities, ie reset their id to be able to save
 * the new copy for example.
 *
 * @param object $replica
 *   Reference to the fully loaded entity object being saved (the clone) that
 *   can be altered as needed.
 *
 * @see replicate_clone_entity()
 */
function erpal_commerce_ui_replicate_entity_commerce_order(&$replica) {
  global $user;
  $id = $replica->order_id;
  $replica->order_id = NULL;
  $replica->status = 'pending';
  $replica->uid = $user->uid;
  $replica_wrapper = entity_metadata_wrapper('commerce_order', $replica, array('bundle' => $replica->type));
  $commerce_line_items = field_get_items('commerce_order', $replica, 'commerce_line_items');
  unset($replica->order_number,
    $replica->revision_id,
    $replica->revision_uid,
    $replica->created,
    $replica->changed,
    $replica->hostname,
    $replica->commerce_line_items);
  // Replicate commerce lite items.
  if ($commerce_line_items) {
    $new_commerce_line_items = array();
    foreach ($commerce_line_items as $value) {
      $line_item = clone commerce_line_item_load($value['line_item_id']);
      unset($line_item->line_item_id, $line_item->order_id);
      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item, array('bundle' => $line_item->type));

      // Replicate payment modality for line items.
      if (isset($line_item_wrapper->field_payment_modality) && $replica->type != 'commerce_order') {
        $field_payment_modalities = $line_item_wrapper->field_payment_modality->value();
        unset($line_item->field_payment_modality);
        if ($field_payment_modalities) {

          $new_payment_modalities = array();
          foreach ($field_payment_modalities as $payment_modality) {
            unset($payment_modality->payment_modality_id,
            $payment_modality->created,
            $payment_modality->changed,
            $payment_modality->revision_id,
            $payment_modality->default_revision);
            $payment_modality->uid = $user->uid;
            erpal_payment_modality_save($payment_modality);
            $new_payment_modalities[] = $payment_modality;
          }

          $line_item_wrapper->field_payment_modality->set($new_payment_modalities);
        }
      }

      // If its copied from Order to Invoice.
      if ($replica->type == 'commerce_order') {
        $line_item_wrapper->field_line_item_billable->set(TRUE);
      }

      // Remove double calculated taxes. Taxes was added again after line_item save.
      module_load_include('inc', 'commerce_tax', 'commerce_tax.rules');
      $unit_price = $line_item_wrapper->commerce_unit_price->value();
      $increase_base_price = !empty($unit_price['data']['include_tax']);
      commerce_tax_remove_taxes($line_item_wrapper, $increase_base_price, array());

      $line_item_wrapper->save();
      $new_commerce_line_items[] = $line_item;
    }
    $replica_wrapper->commerce_line_items->set($new_commerce_line_items);
  }

  if ($replica->type == 'commerce_order') {
    $replica->type = 'invoice';
    $replica_wrapper = entity_metadata_wrapper('commerce_order', $replica, array('bundle' => $replica->type));
    unset($replica->field_order_date,
    $replica->field_order_text,
    $replica->field_order);
    $replica_wrapper->field_invoice_order->set($id);
  }

  if ($replica->type == 'quote') {
    $replica->type = 'commerce_order';
    $replica_wrapper = entity_metadata_wrapper('commerce_order', $replica, array('bundle' => $replica->type));
    unset($replica->field_sales_process,
    $replica->field_quote_text,
    $replica->field_valid_until);

    $replica_wrapper->field_quote->set($id);
  }
}
